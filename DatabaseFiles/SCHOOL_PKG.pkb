CREATE OR REPLACE PACKAGE BODY PYTHONORA.SCHOOL_PKG AS

/**** STUDENTS OPERATIONS BEGIN**/

FUNCTION GET_STUDENTS_BYID(STUDENT_ID1 IN NUMBER) RETURN STUDENT_CURS IS
BEGIN
  DECLARE
    CURS STUDENT_CURS;
  BEGIN 
    OPEN CURS FOR
    SELECT ID,
            STUDENT_NUMBER,
            NAME,
            SURNAME,
            BIRTHDATE,
            GENDER,
            CLASS_ID
    FROM STUDENTS
    WHERE ID = STUDENT_ID1;
    RETURN CURS;
  END;
END GET_STUDENTS_BYID; 

FUNCTION GET_STUDENTS_BYCLASSID(CLASS_ID1 IN NUMBER) RETURN STUDENT_CURS IS
BEGIN
  DECLARE
    CURS STUDENT_CURS;
  BEGIN 
    OPEN CURS FOR
    SELECT ID,
            STUDENT_NUMBER,
            NAME,
            SURNAME,
            BIRTHDATE,
            GENDER,
            CLASS_ID
    FROM STUDENTS
    WHERE CLASS_ID = CLASS_ID1;
    RETURN CURS;
  END;
END GET_STUDENTS_BYCLASSID;

FUNCTION GET_ALL_STUDENTS(STUDENT_ID1 IN NUMBER,CLASS_ID1 IN NUMBER) RETURN STUDENT_CURS IS
BEGIN
  DECLARE
    CURS STUDENT_CURS;
  BEGIN 
    OPEN CURS FOR
    SELECT ID,
            STUDENT_NUMBER,
            NAME,
            SURNAME,
            BIRTHDATE,
            GENDER,
            CLASS_ID
    FROM STUDENTS WHERE 
    NVL(STUDENT_ID1,0) = 0 OR(STUDENT_ID1 >0 AND ID=STUDENT_ID1) AND
    NVL(CLASS_ID1,0) = 0 OR(CLASS_ID1>0 AND CLASS_ID =CLASS_ID1);
    RETURN CURS;
  END;
END GET_ALL_STUDENTS;


FUNCTION STUDENT_PUT(STUDENT_NUMBER1 VARCHAR2,
                     NAME1 VARCHAR2,
                     SURNAME1 VARCHAR2,
                     BIRTHDATE1 DATE,
                     GENDER1 VARCHAR2,
                     CLASS_ID1 NUMBER) RETURN NUMBER IS
BEGIN
  DECLARE
    STUDENT_IDX NUMBER(6);
  BEGIN
    SELECT STUDENT_SEQ.NEXTVAL
    INTO STUDENT_IDX
    FROM DUAL;
   
    INSERT INTO STUDENTS(ID, 
                         STUDENT_NUMBER,
                         NAME,
                         SURNAME,
                         GENDER,
                         BIRTHDATE,
                         CLASS_ID) 
    VALUES(STUDENT_IDX, 
           STUDENT_NUMBER1,
           NAME1 ,
           SURNAME1 ,
           GENDER1 ,
           BIRTHDATE1 ,
           CLASS_ID1);
    
                                                                      
    COMMIT;
  
    RETURN STUDENT_IDX;
    EXCEPTION 
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE; 
  END;
END STUDENT_PUT;

FUNCTION STUDENT_UPDATE(STUDENT_ID1 NUMBER,
                        STUDENT_NUMBER1 VARCHAR2,
                        NAME1 VARCHAR2,
                        SURNAME1 VARCHAR2,
                        BIRTHDATE1 DATE,
                        GENDER1 VARCHAR2,
                        CLASS_ID1 NUMBER) RETURN NUMBER IS
BEGIN
  BEGIN
   
    UPDATE STUDENTS SET  STUDENT_NUMBER = STUDENT_NUMBER1,
                         NAME = NAME1,
                         SURNAME = SURNAME1,
                         GENDER = GENDER1,
                         BIRTHDATE = BIRTHDATE1,
                         CLASS_ID= CLASS_ID1
           WHERE ID = STUDENT_ID1;
    
                                                                      
    COMMIT;
  
    RETURN STUDENT_ID1;
    EXCEPTION 
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE; 
  END;
END STUDENT_UPDATE;

PROCEDURE STUDENT_DELETE(STUDENT_ID1 IN NUMBER) AS
BEGIN  
  BEGIN  
    DELETE FROM STUDENTS WHERE ID = STUDENT_ID1; 
    COMMIT;
    
    EXCEPTION 
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END;
END STUDENT_DELETE;  

/**** STUDENTS OPERATIONS END**/



/**** TEACHERS OPERATIONS BEGIN**/

FUNCTION GET_TEACHER_BY_ID(TEACHER_ID1 IN NUMBER) RETURN TEACHER_CURS IS
BEGIN
  DECLARE
    CURS TEACHER_CURS;
  BEGIN 
    OPEN CURS FOR
    SELECT ID,
            NAME,
            SURNAME,
            BIRTHDATE,
            GENDER,
            BRANCH
    FROM TEACHERS
    WHERE ID = TEACHER_ID1;
    RETURN CURS;
  END;
END GET_TEACHER_BY_ID; 

FUNCTION GET_TEACHERS_BY_BRANCH(BRANCH1 IN VARCHAR2) RETURN TEACHER_CURS IS
BEGIN
  DECLARE
    CURS TEACHER_CURS;
  BEGIN 
    OPEN CURS FOR
    SELECT ID,
            NAME,
            SURNAME,
            BIRTHDATE,
            GENDER,
            BRANCH
    FROM TEACHERS
    WHERE BRANCH LIKE '%' ||BRANCH1||'%';
    RETURN CURS;
  END;
END GET_TEACHERS_BY_BRANCH;

FUNCTION GET_ALL_TEACHERS(TEACHER_ID1 IN NUMBER,BRANCH1 IN VARCHAR2) RETURN TEACHER_CURS IS
BEGIN
  DECLARE
    CURS TEACHER_CURS;
  BEGIN 
    OPEN CURS FOR
    SELECT ID,
            BRANCH,
            NAME,
            SURNAME,
            BIRTHDATE,
            GENDER
    FROM TEACHERS WHERE
    NVL(TEACHER_ID1,0) =0 OR(TEACHER_ID1>0 AND ID =TEACHER_ID1) AND
    BRANCH1 IS NULL OR(BRANCH1 IS NOT NULL AND UPPER(BRANCH) LIKE '%'||BRANCH1||'%');
    RETURN CURS;
  END;
END GET_ALL_TEACHERS;


FUNCTION TEACHER_PUT(NAME1 VARCHAR2,
                     SURNAME1 VARCHAR2,
                     BIRTHDATE1 DATE,
                     GENDER1 VARCHAR2,
                     BRANCH1 VARCHAR2) RETURN NUMBER IS
BEGIN
  DECLARE
    TEACHER_IDX NUMBER(6);
  BEGIN
    SELECT TEACHER_SEQ.NEXTVAL
    INTO TEACHER_IDX
    FROM DUAL;
   
    INSERT INTO TEACHERS(ID, 
                         NAME,
                         SURNAME,
                         GENDER,
                         BIRTHDATE,
                         BRANCH) 
    VALUES(TEACHER_IDX, 
           NAME1 ,
           SURNAME1 ,
           GENDER1 ,
           BIRTHDATE1 ,
           BRANCH1);
    
                                                                      
    COMMIT;
  
    RETURN TEACHER_IDX;
    EXCEPTION 
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE; 
  END;
END TEACHER_PUT;

FUNCTION TEACHER_UPDATE(TEACHER_ID1 NUMBER,
                        NAME1 VARCHAR2,
                        SURNAME1 VARCHAR2,
                        BIRTHDATE1 DATE,
                        GENDER1 VARCHAR2,
                        BRANCH1 VARCHAR2) RETURN NUMBER IS
BEGIN
  BEGIN
   
    UPDATE TEACHERS SET  NAME = NAME1,
                         SURNAME = SURNAME1,
                         GENDER = GENDER1,
                         BIRTHDATE = BIRTHDATE1,
                         BRANCH= BRANCH1
           WHERE ID = TEACHER_ID1;
    
                                                                      
    COMMIT;
  
    RETURN TEACHER_ID1;
    EXCEPTION 
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE; 
  END;
END TEACHER_UPDATE;

PROCEDURE TEACHER_DELETE(TEACHER_ID1 IN NUMBER) AS
BEGIN  
  BEGIN  
    DELETE FROM TEACHERS WHERE ID = TEACHER_ID1; 
    COMMIT;
    
    EXCEPTION 
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END;
END TEACHER_DELETE;  

/**** TEACHERS OPERATIONS END**/

/**** CLASSES OPERATIONS BEGIN**/

FUNCTION GET_CLASS_BY_ID(CLASS_ID1 IN NUMBER) RETURN CLASS_CURS IS
BEGIN
  DECLARE
    CURS CLASS_CURS;
  BEGIN 
    OPEN CURS FOR
    SELECT ID,
           NAME,
           TEACHER_ID
    FROM CLASSES
    WHERE ID = CLASS_ID1;
    RETURN CURS;
  END;
END GET_CLASS_BY_ID; 

FUNCTION GET_CLASSES_BY_TEACHERID(TEACHER_ID1 IN NUMBER) RETURN CLASS_CURS IS
BEGIN
  DECLARE
    CURS CLASS_CURS;
  BEGIN 
    OPEN CURS FOR
    SELECT ID,
            NAME,
            TEACHER_ID
    FROM CLASSES
    WHERE TEACHER_ID =TEACHER_ID1;
    RETURN CURS;
  END;
END GET_CLASSES_BY_TEACHERID;

FUNCTION GET_ALL_CLASSES(CLASS_ID1 IN NUMBER,TEACHER_ID1 IN NUMBER) RETURN CLASS_CURS IS
BEGIN
  DECLARE
    CURS CLASS_CURS;
  BEGIN 
    OPEN CURS FOR
    SELECT ID,
           NAME,
           TEACHER_ID
    FROM CLASSES
    WHERE (NVL(CLASS_ID1,0)=0 OR(CLASS_ID1>0 AND ID = CLASS_ID1)) AND
          (NVL(TEACHER_ID1,0)=0 OR(TEACHER_ID1>0 AND TEACHER_ID = TEACHER_ID1));
    RETURN CURS;
  END;
END GET_ALL_CLASSES;


FUNCTION CLASS_PUT(NAME1 VARCHAR2,
                   TEACHER_ID1 NUMBER) RETURN NUMBER IS
BEGIN
  DECLARE
    CLASS_IDX NUMBER(6);
  BEGIN
    SELECT CLASS_SEQ.NEXTVAL
    INTO CLASS_IDX
    FROM DUAL;
   
    INSERT INTO CLASSES(ID, 
                         NAME,
                         TEACHER_ID) 
    VALUES(CLASS_IDX, 
           NAME1 ,
           TEACHER_ID1);
    
                                                                      
    COMMIT;
  
    RETURN CLASS_IDX;
    EXCEPTION 
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE; 
  END;
END CLASS_PUT;

FUNCTION CLASS_UPDATE(CLASS_ID1 NUMBER,
                        NAME1 VARCHAR2,
                        TEACHER_ID1 NUMBER) RETURN NUMBER IS
BEGIN
  BEGIN
   
    UPDATE CLASSES SET  NAME = NAME1,
                        TEACHER_ID = TEACHER_ID1
           WHERE ID = CLASS_ID1;
    
                                                                      
    COMMIT;
  
    RETURN CLASS_ID1;
    EXCEPTION 
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE; 
  END;
END CLASS_UPDATE;

PROCEDURE CLASS_DELETE(CLASS_ID1 IN NUMBER) AS
BEGIN  
  BEGIN  
    DELETE FROM CLASSES WHERE ID = CLASS_ID1; 
    COMMIT;
    
    EXCEPTION 
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END;
END CLASS_DELETE;


/**** CLASSES OPERATIONS END**/

/**** LESSONS OPERATIONS BEGIN**/

FUNCTION GET_LESSON_BY_ID(LESSON_ID1 IN NUMBER) RETURN LESSON_CURS IS
BEGIN
  DECLARE
    CURS LESSON_CURS;
  BEGIN 
    OPEN CURS FOR
    SELECT ID,
           NAME
    FROM LESSONS
    WHERE ID = LESSON_ID1;
    RETURN CURS;
  END;
END GET_LESSON_BY_ID; 

FUNCTION GET_LESSONS_BY_NAME(NAME1 IN VARCHAR2) RETURN LESSON_CURS IS
BEGIN
  DECLARE
    CURS LESSON_CURS;
  BEGIN 
    OPEN CURS FOR
    SELECT ID,
            NAME
    FROM LESSONS
    WHERE UPPER(NAME) LIKE '%'||UPPER(NAME1)||'%';
    RETURN CURS;
  END;
END GET_LESSONS_BY_NAME;

FUNCTION GET_ALL_LESSONS(LESSON_ID1 IN NUMBER,NAME1 IN VARCHAR2) RETURN LESSON_CURS IS
BEGIN
  DECLARE
    CURS LESSON_CURS;
  BEGIN 
    OPEN CURS FOR
    SELECT ID,
           NAME
    FROM LESSONS
    WHERE (NVL(LESSON_ID1,0)=0 OR(LESSON_ID1>0 AND ID = LESSON_ID1)) AND
          (NAME1 IS NULL OR(NAME1 IS NOT NULL AND (UPPER (NAME) LIKE '%'||NAME1||'%')));
    RETURN CURS;
  END;
END GET_ALL_LESSONS;


FUNCTION LESSON_PUT(NAME1 VARCHAR2) RETURN NUMBER IS
BEGIN
  DECLARE
    LESSON_IDX NUMBER(6);
  BEGIN
    SELECT LESSON_SEQ.NEXTVAL
    INTO LESSON_IDX
    FROM DUAL;
   
    INSERT INTO LESSONS(ID, 
                         NAME) 
    VALUES(LESSON_IDX, 
           NAME1 );
    
    COMMIT;
  
    RETURN LESSON_IDX;
    EXCEPTION 
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE; 
  END;
END LESSON_PUT;

FUNCTION LESSON_UPDATE(LESSON_ID1 NUMBER,
                       NAME1 VARCHAR2) RETURN NUMBER IS
BEGIN
  BEGIN
   
    UPDATE LESSONS SET  NAME = NAME1
                   WHERE ID = LESSON_ID1;
    
                                                                      
    COMMIT;
  
    RETURN LESSON_ID1;
    EXCEPTION 
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE; 
  END;
END LESSON_UPDATE;

PROCEDURE LESSON_DELETE(LESSON_ID1 IN NUMBER) AS
BEGIN  
  BEGIN  
    DELETE FROM LESSONS WHERE ID = LESSON_ID1; 
    COMMIT;
    
    EXCEPTION 
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END;
END LESSON_DELETE;

/**** LESSONS OPERATIONS END**/

/**** CLASS-LESSONS OPERATIONS BEGIN**/

FUNCTION GET_CLASSLESSON_BY_ID(ID1 IN NUMBER) RETURN CLASS_LESSON_CURS IS
BEGIN
  DECLARE
    CURS CLASS_LESSON_CURS;
  BEGIN 
    OPEN CURS FOR
    SELECT CLASSES_LESSONS.ID,
           CLASSES.ID,
           CLASSES.NAME,
           LESSONS.ID,
           LESSONS.NAME,
           TEACHERS.ID,
           TEACHERS.NAME
    FROM CLASSES_LESSONS
    INNER JOIN CLASSES ON CLASSES_LESSONS.LESSON_ID = CLASSES.ID 
    INNER JOIN LESSONS ON CLASSES_LESSONS.LESSON_ID =LESSONS.ID 
    INNER JOIN TEACHERS ON CLASSES_LESSONS.TEACHER_ID = TEACHERS.ID
    WHERE CLASSES_LESSONS.ID = ID1;
    RETURN CURS;
  END;
END GET_CLASSLESSON_BY_ID; 

FUNCTION GET_ALL_CLASSLESSONS(ID1 IN NUMBER,
                              CLASS_ID1 IN NUMBER,
                              CLASS_NAME1 IN VARCHAR2,
                              LESSON_ID1 IN NUMBER,
                              LESSON_NAME1 IN VARCHAR2,
                              TEACHER_ID1 IN NUMBER,
                              TEACHER_NAME1 IN VARCHAR2) RETURN CLASS_LESSON_CURS IS
BEGIN
  DECLARE
    CURS CLASS_LESSON_CURS;
  BEGIN 
    OPEN CURS FOR
    SELECT CLASSES_LESSONS.ID,
           CLASSES.ID,
           CLASSES.NAME,
           LESSONS.ID,
           LESSONS.NAME,
           TEACHERS.ID,
           TEACHERS.NAME
    FROM CLASSES_LESSONS
    INNER JOIN CLASSES ON CLASSES_LESSONS.LESSON_ID = CLASSES.ID 
    INNER JOIN LESSONS ON CLASSES_LESSONS.LESSON_ID =LESSONS.ID 
    INNER JOIN TEACHERS ON CLASSES_LESSONS.TEACHER_ID = TEACHERS.ID
    WHERE (NVL(ID1,0)=0 OR (ID1>0 AND CLASSES_LESSONS.ID = ID1)) AND
          (NVL(CLASS_ID1,0)=0 OR (CLASS_ID1>0 AND CLASSES.ID = CLASS_ID1)) AND
          (CLASS_NAME1 IS NULL OR(CLASS_NAME1 IS NOT NULL AND (UPPER(CLASSES.NAME) LIKE '%'||UPPER(CLASS_NAME1)||'%')))AND
          (NVL(LESSON_ID1,0)=0 OR (LESSON_ID1>0 AND LESSONS.ID = LESSON_ID1)) AND
          (LESSON_NAME1 IS NULL OR(LESSON_NAME1 IS NOT NULL AND (UPPER(LESSONS.NAME) LIKE '%'||UPPER(LESSON_NAME1)||'%')))AND
          (NVL(TEACHER_ID1,0)=0 OR (TEACHER_ID1>0 AND TEACHERS.ID = TEACHER_ID1)) AND
          (TEACHER_NAME1 IS NULL OR(TEACHER_NAME1 IS NOT NULL AND (UPPER(TEACHERS.NAME) LIKE '%'||UPPER(TEACHER_NAME1)||'%')));
    RETURN CURS;
  END;
END GET_ALL_CLASSLESSONS;


FUNCTION CLASS_LESSON_PUT(CLASS_ID1 IN NUMBER,LESSON_ID1 IN NUMBER,TEACHER_ID1 IN NUMBER) RETURN NUMBER IS
BEGIN
  DECLARE
    CLASS_LESSON_IDX NUMBER(6);
  BEGIN
  
    SELECT CLASS_LESSON_SEQ.NEXTVAL
    INTO CLASS_LESSON_IDX
    FROM DUAL;
   
    INSERT INTO CLASSES_LESSONS(ID, 
                                CLASS_ID,
                                LESSON_ID,
                                TEACHER_ID) 
    VALUES(CLASS_LESSON_IDX, 
           CLASS_ID1,
           LESSON_ID1,
           TEACHER_ID1);
    
    COMMIT;
  
    RETURN CLASS_LESSON_IDX;
    
    /*
    EXCEPTION 
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE; 
    */
  END;
END CLASS_LESSON_PUT;

FUNCTION CLASS_LESSON_UPDATE(ID1 IN NUMBER,
                             CLASS_ID1 IN NUMBER,
                             LESSON_ID1 IN NUMBER,
                             TEACHER_ID1 IN NUMBER) RETURN NUMBER IS
BEGIN
  BEGIN
   
    UPDATE CLASSES_LESSONS SET  CLASS_ID = CLASS_ID1,
                                LESSON_ID = LESSON_ID1,
                                TEACHER_ID = TEACHER_ID1
                           WHERE ID = ID1;
    
                                                                      
    COMMIT;
  
    RETURN ID1;
    EXCEPTION 
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE; 
  END;
END CLASS_LESSON_UPDATE;

PROCEDURE CLASS_LESSON_DELETE(ID1 IN NUMBER) AS
BEGIN  
  BEGIN  
    DELETE FROM CLASSES_LESSONS WHERE ID = ID1; 
    COMMIT;
    
    EXCEPTION 
      WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
  END;
END CLASS_LESSON_DELETE;

/**** CLASS-LESSONS OPERATIONS END**/




END SCHOOL_PKG;
/